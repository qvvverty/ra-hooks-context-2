{"version":3,"sources":["components/hooks/useJsonFetch.jsx","components/RenderData.jsx","components/RenderError.jsx","components/RenderLoading.jsx","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","opts","useState","data","setData","isLoading","setLoading","hasError","setError","useEffect","a","fetch","response","ok","json","statusText","status","fetchData","RenderData","process","className","Object","entries","map","entry","RenderError","RenderLoading","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAEe,SAASA,EAAaC,EAAKC,GAAO,IAAD,EACtBC,qBADsB,mBACvCC,EADuC,KACjCC,EADiC,OAEdF,qBAFc,mBAEvCG,EAFuC,KAE5BC,EAF4B,OAGjBJ,mBAAS,MAHQ,mBAGvCK,EAHuC,KAG7BC,EAH6B,KA0B9C,OArBAC,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBJ,GAAW,GADK,SAGOK,MAAMX,GAHb,YAGVY,EAHU,QAIHC,GAJG,sCAMZT,EANY,SAMEQ,EAASE,OANX,oFAQZN,EAAS,sDARG,yBAUZF,GAAW,GAVC,6CAadE,EAASI,EAASG,WAAa,aAAeH,EAASI,QAbzC,gEAAH,qDAiBfC,KACC,CAACjB,IAEG,CAAEG,OAAME,YAAWE,Y,WC1Bb,SAASW,IAAc,IAC5Bf,EAASJ,EAAaoB,yCAAtBhB,KAER,OACE,qBAAIiB,UAAU,sBAAd,UACE,sBAAMA,UAAU,cAAhB,qCACCjB,GAAQkB,OAAOC,QAAQnB,GAAMoB,KAAI,SAAAC,GAAK,OAAI,+BAAoBA,EAAM,GAA1B,KAAgCA,EAAM,KAA7BA,EAAM,UCNjD,SAASC,IAAe,IAC7BlB,EAAaR,EAAaoB,0CAA1BZ,SAER,OACE,qBAAKa,UAAU,sBAAf,SACGb,GAAsB,OCLd,SAASmB,IAAiB,IAC/BrB,EAAcN,EAAaoB,4CAA3Bd,UAER,OACE,qBAAKe,UAAU,sBAAf,SACGf,EAAY,aAAe,WCQnBsB,MAVf,WACE,OACE,qCACE,cAACT,EAAD,IACA,cAACO,EAAD,IACA,cAACC,EAAD,QCESE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cbf170cd.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useJsonFetch(url, opts) {\n  const [data, setData] = useState();\n  const [isLoading, setLoading] = useState();\n  const [hasError, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      const response = await fetch(url);\n      if (response.ok) {\n        try {\n          setData(await response.json());\n        } catch {\n          setError('Error parsing server response: probably not a JSON');\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        setError(response.statusText + ', status: ' + response.status);\n      }\n    }\n\n    fetchData();\n  }, [url]);\n\n  return { data, isLoading, hasError };\n}\n","import useJsonFetch from './hooks/useJsonFetch';\n\nexport default function RenderData() {\n  const { data } = useJsonFetch(process.env.REACT_APP_BACKEND_URL + 'data');\n\n  return (\n    <ul className=\"component-container\">\n      <span className=\"data-header\">Response object fields:</span>\n      {data && Object.entries(data).map(entry => <li key={entry[0]}>{entry[0]}: {entry[1]}</li>)}\n    </ul>\n  )\n}\n","import useJsonFetch from \"./hooks/useJsonFetch\";\n\nexport default function RenderError() {\n  const { hasError } = useJsonFetch(process.env.REACT_APP_BACKEND_URL + 'error');\n\n  return (\n    <div className=\"component-container\">\n      {hasError ? hasError : null}\n    </div>\n  )\n}\n","import useJsonFetch from \"./hooks/useJsonFetch\";\n\nexport default function RenderLoading() {\n  const { isLoading } = useJsonFetch(process.env.REACT_APP_BACKEND_URL + 'loading');\n\n  return (\n    <div className=\"component-container\">\n      {isLoading ? 'Loading...' : 'Loaded'}\n    </div>\n  )\n}\n","import './App.css';\nimport RenderData from './components/RenderData';\nimport RenderError from './components/RenderError';\nimport RenderLoading from './components/RenderLoading';\n\nfunction App() {\n  return (\n    <>\n      <RenderData />\n      <RenderError />\n      <RenderLoading />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}